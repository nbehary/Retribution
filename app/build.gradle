apply plugin: 'android'

repositories {
    maven { url 'http://repo1.maven.org/maven2' }
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.larswerkman:HoloColorPicker:1.1'
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.0"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 19
    }

    if(project.hasProperty("MyProject.properties")
            && new File(project.property("MyProject.properties")).exists()) {

        Properties props = new Properties()
        props.load(new FileInputStream(file(project.property("MyProject.properties"))))

        signingConfigs {
            release {
                storeFile file(props['keystore'])
                storePassword props['keystore.password']
                keyAlias props['keyAlias']
                keyPassword props['keyPassword']
            }
        }
    }

    task('increaseVersionCode') << {
        def manifestFile = file("src/main/AndroidManifest.xml")
        def pattern = java.util.regex.Pattern.compile("versionCode=\"(\\d+)\"")
        def manifestText = manifestFile.getText()
        def matcher = pattern.matcher(manifestText)
        matcher.find()
        def versionCode = Integer.parseInt(matcher.group(1))
        def manifestContent = matcher.replaceAll("versionCode=\"" + ++versionCode + "\"")
        manifestFile.write(manifestContent)
    }

    tasks.whenTaskAdded { task ->
        if ((task.name == 'generateDebugBuildConfig') || (task.name == 'generateReleaseBuildConfig')) {
            task.dependsOn 'increaseVersionCode'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile 'com.android.support:support-v4:+'
    compile files('libs/protobuf.jar')
}